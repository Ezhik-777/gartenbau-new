// Ultra-optimized lazy loading gallery with virtual scrolling
class UltraLazyGallery {
  constructor() {
    this.container = document.getElementById('galleryContainer');
    this.loader = document.getElementById('loader');
    this.pagination = document.getElementById('pagination');
    
    this.totalImages = 180;
    this.imagesPerPage = 12;
    this.currentPage = 1;
    this.visibleImages = new Set();
    this.imageCache = new Map();
    this.loadQueue = [];
    this.isLoading = false;
    
    // Performance optimizations
    this.intersectionObserver = null;
    this.mutationObserver = null;
    this.resizeObserver = null;
    
    this.init();
  }
  
  init() {
    if (!this.container) return;
    
    this.setupObservers();
    this.createImageElements();
    this.bindEvents();
    this.hideLoader();
  }
  
  setupObservers() {
    // Intersection Observer for lazy loading
    if ('IntersectionObserver' in window) {
      this.intersectionObserver = new IntersectionObserver(
        (entries) => this.handleIntersection(entries),
        {
          root: null,
          rootMargin: '100px 0px',
          threshold: 0.01
        }
      );
    }
    
    // Resize Observer for responsive adjustments
    if ('ResizeObserver' in window) {
      this.resizeObserver = new ResizeObserver(
        (entries) => this.handleResize(entries)
      );
      this.resizeObserver.observe(this.container);
    }
  }
  
  createImageElements() {
    this.container.innerHTML = '';
    this.container.className = 'premium-gallery-grid active';
    
    const fragment = document.createDocumentFragment();
    const startIndex = (this.currentPage - 1) * this.imagesPerPage;
    const endIndex = Math.min(startIndex + this.imagesPerPage, this.totalImages);
    
    for (let i = startIndex; i < endIndex; i++) {
      const imageNumber = i + 1;
      if (imageNumber === 42) continue; // Skip problematic image
      
      const element = this.createOptimizedImageElement(imageNumber);
      fragment.appendChild(element);
    }
    
    this.container.appendChild(fragment);
    this.updatePagination();
    
    // Observe all new images
    this.container.querySelectorAll('.premium-gallery-item').forEach(item => {
      if (this.intersectionObserver) {
        this.intersectionObserver.observe(item);
      }
    });
  }
  
  createOptimizedImageElement(imageNumber) {
    const imgSrc = `img/image_${imageNumber}.webp`;
    const fallbackSrc = `img/image_${imageNumber}.jpg`;
    
    const a = document.createElement('a');
    a.href = imgSrc;
    a.className = 'premium-gallery-item';
    a.setAttribute('data-fancybox', 'gallery2');
    a.setAttribute('data-image-number', imageNumber);
    
    // Create placeholder
    const placeholder = document.createElement('div');
    placeholder.className = 'image-placeholder';
    placeholder.style.cssText = `
      width: 100%;
      height: 100%;
      background: linear-gradient(135deg, #f0f9f4 0%, #ffffff 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: #6c757d;
      font-size: 0.9rem;
    `;
    placeholder.textContent = 'L√§dt...';
    
    // Create image element (not loaded yet)
    const img = document.createElement('img');
    img.className = 'gallery-image';
    img.alt = `Gartenbau Projekt ${imageNumber} - Stuttgart Region`;
    img.style.cssText = 'opacity: 0; transition: opacity 0.3s ease;';
    img.setAttribute('data-src', imgSrc);
    img.setAttribute('data-fallback', fallbackSrc);
    
    // Create overlay
    const overlay = document.createElement('div');
    overlay.className = 'gallery-overlay';
    overlay.innerHTML = `
      <div class="overlay-content">
        <div class="view-button">
          <span class="view-icon">üëÅ</span>
          <span class="view-text">Ansehen</span>
        </div>
      </div>
    `;
    
    a.appendChild(placeholder);
    a.appendChild(img);
    a.appendChild(overlay);
    
    return a;
  }
  
  handleIntersection(entries) {
    const loadPromises = [];
    
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const img = entry.target.querySelector('img[data-src]');
        if (img && !this.visibleImages.has(img)) {
          this.visibleImages.add(img);
          loadPromises.push(this.loadImage(img, entry.target));
          this.intersectionObserver.unobserve(entry.target);
        }
      }
    });
    
    // Batch load images for better performance
    if (loadPromises.length > 0) {
      Promise.allSettled(loadPromises).then(() => {
        this.initializeFancybox();
      });
    }
  }
  
  async loadImage(img, container) {
    const src = img.getAttribute('data-src');
    const fallback = img.getAttribute('data-fallback');
    const placeholder = container.querySelector('.image-placeholder');
    
    try {
      // Check cache first
      if (this.imageCache.has(src)) {
        this.applyImage(img, src, placeholder);
        return Promise.resolve();
      }
      
      // Load with WebP support detection
      const loadedSrc = await this.loadWithFallback(src, fallback);
      this.imageCache.set(src, loadedSrc);
      this.applyImage(img, loadedSrc, placeholder);
      
      // Update progress
      if (typeof window.incrementGalleryProgress === 'function') {
        window.incrementGalleryProgress();
      }
      
    } catch (error) {
      console.warn(`Failed to load image: ${src}`, error);
      placeholder.textContent = 'Fehler beim Laden';
      placeholder.style.color = '#dc3545';
    }
  }
  
  loadWithFallback(webpSrc, fallbackSrc) {
    return new Promise((resolve, reject) => {
      const img = new Image();
      
      img.onload = () => resolve(webpSrc);
      img.onerror = () => {
        // Try fallback
        const fallbackImg = new Image();
        fallbackImg.onload = () => resolve(fallbackSrc);
        fallbackImg.onerror = reject;
        fallbackImg.src = fallbackSrc;
      };
      
      img.src = webpSrc;
    });
  }
  
  applyImage(imgElement, src, placeholder) {
    imgElement.src = src;
    imgElement.removeAttribute('data-src');
    
    imgElement.onload = () => {
      imgElement.style.opacity = '1';
      if (placeholder) {
        placeholder.style.display = 'none';
      }
      imgElement.classList.add('loaded');
    };
  }
  
  updatePagination() {
    const totalPages = Math.ceil(this.totalImages / this.imagesPerPage);
    const pageInfo = document.getElementById('pageInfo');
    const prevBtn = document.getElementById('prevPage');
    const nextBtn = document.getElementById('nextPage');
    
    if (pageInfo) {
      pageInfo.textContent = `Seite ${this.currentPage} von ${totalPages}`;
    }
    
    if (prevBtn) {
      prevBtn.disabled = this.currentPage === 1;
      prevBtn.onclick = () => this.previousPage();
    }
    
    if (nextBtn) {
      nextBtn.disabled = this.currentPage === totalPages;
      nextBtn.onclick = () => this.nextPage();
    }
    
    if (this.pagination) {
      this.pagination.style.display = 'block';
    }
  }
  
  previousPage() {
    if (this.currentPage > 1) {
      this.currentPage--;
      this.createImageElements();
      this.scrollToTop();
    }
  }
  
  nextPage() {
    const totalPages = Math.ceil(this.totalImages / this.imagesPerPage);
    if (this.currentPage < totalPages) {
      this.currentPage++;
      this.createImageElements();
      this.scrollToTop();
    }
  }
  
  scrollToTop() {
    const gallerySection = document.getElementById('Projekte');
    if (gallerySection) {
      const headerHeight = document.querySelector('.head')?.offsetHeight || 80;
      const targetPosition = gallerySection.offsetTop - headerHeight - 20;
      
      window.scrollTo({
        top: targetPosition,
        behavior: 'smooth'
      });
    }
  }
  
  bindEvents() {
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        this.previousPage();
      } else if (e.key === 'ArrowRight') {
        this.nextPage();
      }
    });
    
    // Mobile swipe support
    this.setupSwipeGestures();
  }
  
  setupSwipeGestures() {
    let startX = 0;
    let startY = 0;
    
    this.container.addEventListener('touchstart', (e) => {
      startX = e.touches[0].clientX;
      startY = e.touches[0].clientY;
    }, { passive: true });
    
    this.container.addEventListener('touchend', (e) => {
      if (!startX || !startY) return;
      
      const endX = e.changedTouches[0].clientX;
      const endY = e.changedTouches[0].clientY;
      
      const deltaX = startX - endX;
      const deltaY = startY - endY;
      
      // Only handle horizontal swipes
      if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {
        if (deltaX > 0) {
          this.nextPage();
        } else {
          this.previousPage();
        }
      }
      
      startX = 0;
      startY = 0;
    }, { passive: true });
  }
  
  handleResize(entries) {
    // Debounce resize handling
    if (this.resizeTimeout) {
      clearTimeout(this.resizeTimeout);
    }
    
    this.resizeTimeout = setTimeout(() => {
      this.adjustForViewport();
    }, 250);
  }
  
  adjustForViewport() {
    const containerWidth = this.container.offsetWidth;
    const itemMinWidth = 300;
    const gap = 32; // 2rem
    
    const itemsPerRow = Math.floor((containerWidth + gap) / (itemMinWidth + gap));
    const optimalItemsPerPage = itemsPerRow * Math.ceil(12 / itemsPerRow);
    
    if (optimalItemsPerPage !== this.imagesPerPage) {
      this.imagesPerPage = optimalItemsPerPage;
      this.createImageElements();
    }
  }
  
  initializeFancybox() {
    // Initialize fancybox for newly loaded images
    if (typeof jQuery !== 'undefined' && jQuery.fancybox) {
      jQuery('[data-fancybox="gallery2"]:not(.fancybox-initialized)')
        .addClass('fancybox-initialized')
        .fancybox({
          arrows: true,
          infobar: false,
          smallBtn: true,
          toolbar: true,
          preload: [1, 1],
          animationEffect: 'fade',
          animationDuration: 250,
          transitionEffect: 'slide',
          transitionDuration: 250,
          hideScrollbar: false
        });
    }
  }
  
  hideLoader() {
    if (this.loader) {
      this.loader.style.display = 'none';
    }
    if (this.container) {
      this.container.style.display = 'grid';
    }
  }
  
  // Cleanup
  destroy() {
    if (this.intersectionObserver) {
      this.intersectionObserver.disconnect();
    }
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
    }
    
    this.imageCache.clear();
    this.visibleImages.clear();
  }
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    new UltraLazyGallery();
  });
} else {
  new UltraLazyGallery();
}